<?php


namespace App\Controller;


use App\Model\Utils\EmpresaUtils;
use Cake\Datasource\ConnectionManager;
use Cake\Event\Event;
use Cake\Http\Response;
use Cake\Http\ServerRequest;

/**
 * Todas API`s devem estender a esta classe pois, nela que realizamos tramentos de token
 * e tambem metodos de padronização de respostas.
 */
class BaseApiController extends AppController
{

    protected $empresaUtils;

    /** @var ConnectionManager*/
    protected $connection;

    public function __construct(ServerRequest $request = null, Response $response = null, $name = null, $eventManager = null, $components = null)
    {
        parent::__construct($request, $response, $name, $eventManager, $components);
        $this->empresaUtils = new EmpresaUtils();
        $this->connection = ConnectionManager::get('default');
    }

    public function beforeFilter(Event $event)
    {
        //Nao renderiza nada
        $this->viewBuilder()->setLayout(false);
        //Nao tem layout
        $this->render(false);
        //Abre nossa transacao
        $this->connection->begin();
    }

    public function afterFilter(Event $event)
    {
        return parent::afterFilter($event); // TODO: Change the autogenerated stub
    }

    protected function validaToken(){
        $action = $this->getRequestAction();
        //Se for login nao valida o token
        if($action == "login"){
            return;
        }
        //O resto valida token
        $token = $this->getRequestToken();
        if(!$token){
            $this->connection->rollback();
            $return = [
                'success' => false,
                'message' => "Não informado token na requisição",
            ];
            $this->callReturn($return, false);
        }else{
            //Busca usuario pelo token, se achar sucesso se nao erro.
            $user = $this->getTableLocator()->get('Users')->find()->where(['token' => $token])->first();
            if(!$user){
                $this->connection->rollback();
                $return = [
                    'success' => false,
                    'message' => "Não localizado usuário.",
                ];
                $this->callReturn($return, false);
            }

        }
    }

    protected function getRequestAction(){
        return $this->getRequest()->getParam('action');
    }

    protected function getRequestToken(){
        $token = $this->getRequest()->getData('token', false);
        return $token;
    }

    protected function callReturn($result, $validaToken = true){
        if($validaToken){
            $this->validaToken();
        }
        $this->connection->commit();
        echo $this->encode($result);
        die;
    }

    public function decode($value){
        return json_decode($value, true);
    }
    public function encode($value){
        return json_encode($value);
    }


}